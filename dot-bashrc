# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options

# The default in bashrc is the below line,
# however this still allow duplicates
# I tried a solution on stackoverflow, but it
# still saves duplicates
# link: https://askubuntu.com/questions/15926/how-to-avoid-duplicate-entries-in-bash-history (second answer)
export HISTCONTROL=ignoredups:erasedups

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

# set some colors constants, (we will 
# use them for the bash prompt PS1)
RED='\[\033[1;31m\]'
GREEN='\[\033[1;32m\]'
YELLOW='\[\033[1;33m\]'
PURPLE='\[\033[1;35m\]'
WHITE='\[\033[1;37m\]'
BLUE='\[\033[1;34m\]'
CYAN='\[\033[1;36m\]'
NC='\[\033[0m\]'

if [ "$color_prompt" = yes ]; then
    
    # if current directory is a git directory
    is_current_dir_git_folder=$(git rev-parse --is-inside-work-tree 2>/dev/null)
    if [ $is_current_dir_git_folder ]; then 
        
        # grap the name of the current branch
        current_git_branch=$(git branch --show-current)
        # check if there is any changes or untracked files
        current_git_has_changes=$(git status | grep "Changes not staged for commit:")
        current_git_has_untracked=$(git status | grep "Untracked files:")
        
        if [ -z "$current_git_has_changes" ] && [ -z "$current_git_has_untracked" ];
        then
            
            # if no changes, just output the current branch in the PS1
            PS1="[${BLUE} \W :git(${RED}$current_git_branch${BLUE})${NC}] \$ "

        else
            
            # if there is changes, add a plus signe next the current brank name
            PS1="[${BLUE} \W :git(${RED}$current_git_branch[${BLUE}x${RED}]${BLUE})${NC}] \$ "

        fi
    else
        PS1="[${BLUE} \W ${NC}] \$ "
    fi 

    # this is the default, for all the default bashrc file, check /etc/skl/.bashrc
    #PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1="${debian_chroot:+($debian_chroot)}\u@\h: \W \$ "
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \W \a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi


alias rm="myrm.sh"
alias cd=". mycd.sh"
alias vim="nvim"

# set the vi mode for bash
# paste with the vim motions and zoom with the terminal menu bar utilities
set -o vi 

# this prevents the shell from freezing when typing CTRL+S
stty -ixon

# bind some keys for extra functionality

# TODO
#
# For better usage of the C-n and C-p, instead of searching 
# in everything and then excluding some folders, I can do the
# opposite, I can search only in the folder that I want.
#
# This will make things more efficient and more peppy.
#
# My idea to do this is to set a new env variable which will track of 
# my work folder and then whenver I press C-p or C-n, I traverse that 
# array of folders and search in them one by one, the tricky part is 
# to find a way to group all the searchs results into one so as fzf 
# can look into then as a single stdin stream.

# C-p: find all the folder, once one selected, jump to it.
bind '"\C-p":"cd $\C-v( find . -type d ! -path */node_modules/* ! -path */.cache/* ! -path */.git/* ! -path */.vscode/* ! -path */build/* ! -path */bin/* ! -path */__py*/* | fzf \C-v) 2>/dev/null \n "'
# C-n: find all the files, once one file is selected, 
# open it and then if you need to view the folder structer
# just user netrw.
bind '"\C-n": "cd $\C-v( dirname $\C-v( find . ! -path */node_modules/* ! -path */.cache/* ! -path */.git/* ! -path */.vscode/* ! -path */build/* ! -path */bin/* ! -path */__py*/* | fzf \C-v) 2>/dev/null \C-v) && nvim . \n"'

# C-l: clear
bind '"\C-l":"clear\n"'


# this is for the tty. to make it light themed

if [ "$TERM" = "linux" ]; then
    echo -en "\e]P0232323" #black
    echo -en "\e]P82B2B2B" #darkgrey
    echo -en "\e]P1D75F5F" #darkred
    echo -en "\e]P9E33636" #red
    echo -en "\e]P287AF5F" #darkgreen
    echo -en "\e]PA98E34D" #green
    echo -en "\e]P3D7AF87" #brown
    echo -en "\e]PBFFD75F" #yellow
    echo -en "\e]P48787AF" #darkblue
    echo -en "\e]PC7373C9" #blue
    echo -en "\e]P5BD53A5" #darkmagenta
    echo -en "\e]PDD633B2" #magenta
    echo -en "\e]P65FAFAF" #darkcyan
    echo -en "\e]PE44C9C9" #cyan
    echo -en "\e]P7E5E5E5" #lightgrey
    echo -en "\e]PFFFFFFF" #white
    clear #for background artifacting
fi

